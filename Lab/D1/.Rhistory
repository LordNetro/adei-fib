imis<-rep(0,nrow(df))  # rows - trips
jmis<-rep(0,ncol(df))  # columns - variables
######################################################
mis1<-countNA(df)
imis<-mis1$mis_ind
mis1$mis_col # Number of missings for the current set of variables
#######################################################
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,ncol(df))  # columns - variables
#######################################################
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,ncol(df))  # columns - variables
# Mileage
# It is a quantitive variable  Non-possible values will be recoded to NA
selMileage<-which(df$engineSize <= 0)
ierrs[selMileage]<-ierrs[selMileage]+1
jerrs[2]<-length(selMileage)
selMileage                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selMileage,"mileage"]<-NA
selmissEngine <- selMileage
# EngineSize
# It is a quantitive variable  Non-possible values will be recoded to NA
selEngine<-which(df$engineSize ==0)
ierrs[selEngine]<-ierrs[selEngine]+1
jerrs[2]<-length(selEngine)
selEngine                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selEngine,"engineSize"]<-NA
selmissEngine <- selEngine
# Price
# It is a quantitive variable  Non-possible values will be recoded to NA
selPrice<-which(df$price <=0)
ierrs[selPrice]<-ierrs[selPrice]+1
jerrs[1]<-length(selPrice)
selPrice                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selPrice,"price"]<-NA
selmissPrice <- selPrice
summary(df$engineSize)
summary(df$price)
ierrs
jerrs
View(df)
#######################################################
imis<-rep(0,nrow(df))  # rows - trips
jmis<-rep(0,ncol(df))  # columns - variables
######################################################
mis1<-countNA(df)
imis<-mis1$mis_ind
mis1$mis_col # Number of missings for the current set of variables
#######################################################
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,ncol(df))  # columns - variables
#######################################################
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,ncol(df))  # columns - variables
# Mileage
# It is a quantitive variable  Non-possible values will be recoded to NA
selMileage<-which(df$engineSize <= 0)
ierrs[selMileage]<-ierrs[selMileage]+1
jerrs[5]<-length(selMileage)
selMileage                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
df[selMileage,"mileage"]<-NA
selmissEngine <- selMileage
# EngineSize
# It is a quantitive variable  Non-possible values will be recoded to NA
selEngine<-which(df$engineSize ==0)
ierrs[selEngine]<-ierrs[selEngine]+1
jerrs[9]<-length(selEngine)
selEngine                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selEngine,"engineSize"]<-NA
selmissEngine <- selEngine
# Price
# It is a quantitive variable  Non-possible values will be recoded to NA
selPrice<-which(df$price <=0)
ierrs[selPrice]<-ierrs[selPrice]+1
jerrs[3]<-length(selPrice)
selPrice                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
df[selPrice,"price"]<-NA
selmissPrice <- selPrice
# MPG
# It is a quantitive variable  Non-possible values will be recoded to NA
selMPG<-which(df$mpg <=0)
ierrs[selMPG]<-ierrs[selMPG]+1
jerrs[8]<-length(selMPG)
selMPG                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selMPG,"mpg"]<-NA
selmissMPG <- selMPG
summary(df)
ierrs
jerrs
load("Cars.RData")
load("Cars.RData")
factormpg <- as.factor(df$mpg)
testVar <- as.factor(df$transmission)
summary(testVar)
as.factor(df$mpg)
# Some useful functions
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
countNA <- function(x) {
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i) }
countX <- function(x,X) {
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i) }
#######################################################
imis<-rep(0,nrow(df))  # rows - trips
jmis<-rep(0,ncol(df))  # columns - variables
######################################################
mis1<-countNA(df)
imis<-mis1$mis_ind
mis1$mis_col # Number of missings for the current set of variables
#######################################################
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,ncol(df))  # columns - variables
#######################################################
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,ncol(df))  # columns - variables
# Mileage
# It is a quantitive variable  Non-possible values will be recoded to NA
selMileage<-which(df$mileage <= 0)
ierrs[selMileage]<-ierrs[selMileage]+1
jerrs[5]<-length(selMileage)
selMileage                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
df[selMileage,"mileage"]<-NA
selmissEngine <- selMileage
# EngineSize
# It is a quantitive variable  Non-possible values will be recoded to NA
selEngine<-which(df$engineSize <=0)
ierrs[selEngine]<-ierrs[selEngine]+1
jerrs[9]<-length(selEngine)
selEngine                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selEngine,"engineSize"]<-NA
selmissEngine <- selEngine
# Price
# It is a quantitive variable  Non-possible values will be recoded to NA
selPrice<-which(df$price <=0)
ierrs[selPrice]<-ierrs[selPrice]+1
jerrs[3]<-length(selPrice)
selPrice                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
df[selPrice,"price"]<-NA
selmissPrice <- selPrice
# MPG
# It is a quantitive variable  Non-possible values will be recoded to NA
selMPG<-which(df$mpg <=0)
ierrs[selMPG]<-ierrs[selMPG]+1
jerrs[8]<-length(selMPG)
selMPG                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selMPG,"mpg"]<-NA
selmissMPG <- selMPG
summary(df)
ierrs
ierrs
jerrs
# MPG
# It is a quantitive variable  Non-possible values will be recoded to NA
selMPG<-which(df$mpg < 0)
ierrs[selMPG]<-ierrs[selMPG]+1
jerrs[8]<-length(selMPG)
selMPG                 #### sel contains the rownames of the individuals with "0"
boxplot(df$price, main="Boxplot of Price", ylab="Price")
var_outPrice<-calcQ(df$price)
summary(df$price)
abline(h=var_outPrice$souts,col="red")
abline(h=var_outPrice$souti,col="red")
lloutPrice<-which((df$price<var_outPrice$souti)|(df$price>var_outPrice$souts))
df$price[lloutPrice, "price"]<-NA
View(df)
boxplot(df$price, main="Boxplot of Price", ylab="Price")
var_outPrice<-calcQ(df$price)
summary(df$price)
abline(h=var_outPrice$souts,col="red")
abline(h=var_outPrice$souti,col="red")
lloutPrice<-which((df$price<var_outPrice$souti)|(df$price>var_outPrice$souts))
df$price[lloutPrice]<-NA
iouts[lloutPrice]<-iouts[lloutPrice]+1
jouts[3]<-length(lloutPrice)
boxplot(df$engineSize, main="Boxplot of Engine Size", ylab="Engine Size")
var_outEngine<-calcQ(df$engineSize)
summary(df$engineSize)
abline(h=var_outEngine$souts,col="red")
abline(h=var_outEngine$souti,col="red")
lloutEngine<-which((df$engineSize<var_outEngine$souti)|(df$engineSize>var_outEngine$souts))
df$engineSize[lloutEngine]<-NA
iouts[lloutEngine]<-iouts[lloutEngine]+1
jouts[9]<-length(lloutEngine)
boxplot(df$mileage, main="Boxplot of Mileage", ylab="Mileage")
var_outMileage<-calcQ(df$mileage)
summary(df$mileage)
abline(h=var_outMileage$souts,col="red")
abline(h=var_outMileage$souti,col="red")
lloutMileage<-which((df$mileage<var_outMileage$souti)|(df$mileage>var_outMileage$souts))
df$mileage[lloutMileage]<-NA
iouts[lloutMileage]<-iouts[lloutMileage]+1
jouts[5]<-length(lloutMileage)
boxplot(df$mpg, main="Boxplot of MPG", ylab="MPG")
var_outMPG<-calcQ(df$mpg)
summary(df$mpg)
abline(h=var_outMPG$souts,col="red")
abline(h=var_outMPG$souti,col="red")
lloutMPG<-which((df$mpg<var_outMPG$souti)|(df$mpg>var_outMPG$souts))
df$mpg[lloutMPG]<-NA
iouts[lloutMPG]<-iouts[lloutMPG]+1
jouts[5]<-length(lloutMPG)
jouts
#df[llout,"engineSize"]<-NA
ierrs
ierrs
jerrs
plot(jerrs, main="Errors per Variable")
hist(jerrs, main="Errors per Variable")
barplot(jerrs, main="Errors per Variable")
barplot(jerrs, main="Errors per Variable", col = rainbow(10))
barplot(mis1$mis_col, main = "Missings per variable", col = rainbow(10))
mis1$mis_col # Number of missings for the current set of variables
mis1
View(mis1)
hist(mis1$mis_col, main = "Missings per variable", col = rainbow(10))
barplot(as.numeric(mis1$mis_col), main = "Missings per variable", col = rainbow(10))
test<-mis1$mis_col # Number of missings for the current set of variables
View(test)
View(test)
barplot(as.numeric(mis1$mis_col$mis_x), main = "Missings per variable", col = rainbow(10))
barplot(as.numeric(mis1$mis_col$mis_x), main = "Missings per variable", col = rainbow(10))
test<-which(ierrs>0)
numErrorsIndividuals<-which(ierrs>0)
numErrorsIndividuals
numMissIndividuals<-which(imis>0)
barplot(as.numeric(numMissIndividuals), main = "Missings per Individual", col = rainbow(10)))
barplot(as.numeric(numMissIndividuals), main = "Missings per Individual", col = rainbow(10))
numMissIndividuals<-which(imis>0)
numMissIndividuals
numMissIndividuals<-which(mis1>0)
table(mis1)
numMissIndividuals<-which(imis>0)
numMissIndividuals
numMissIndividuals<-which(imis>0)
numMissIndividuals
numMissIndividuals<-which(imis==0)
numMissIndividuals
barplot(as.numeric(numMissIndividuals), main = "Missings per Individual", col = rainbow(10))
barplot(as.numeric(numMissIndividuals), main = "Missings per Individual", col = rainbow(10))
barplot(as.numeric(mis1$mis_col$mis_x), main = "Missings per variable", col = rainbow(10))
barplot(as.numeric(numMissIndividuals), main = "Missings per Individual", col = rainbow(10))
hist(as.numeric(numMissIndividuals), main = "Missings per Individual", col = rainbow(10))
hist(as.numeric(imis), main = "Missings per Individual", col = rainbow(10))
barplot(as.numeric(imis), main = "Missings per Individual", col = rainbow(10))
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
lloutPrice<-which((df$price<var_outPrice$souti)|(df$price>var_outPrice$souts))
df$price[lloutPrice]<-NA
iouts[lloutPrice]<-iouts[lloutPrice]+1
jouts[3]<-length(lloutPrice)
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
lloutEngine<-which((df$engineSize<var_outEngine$souti)|(df$engineSize>var_outEngine$souts))
df$engineSize[lloutEngine]<-NA
boxplot(df$engineSize, main="Clean Boxplot of Engine Size", ylab="Engine Size")
var_outMileage$souti
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
df$engineSize[lloutEngine]<-NA
boxplot(df$engineSize, main="Clean Boxplot of Engine Size", ylab="Engine Size")
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
boxplot(df$mileage, main="Clean Boxplot of Mileage", ylab="Mileage")
df$mileage[lloutMileage]<-NA
boxplot(df$mileage, main="Clean Boxplot of Mileage", ylab="Mileage")
df$mpg[lloutMPG]<-NA
boxplot(df$mpg, main="Clean Boxplot of MPG", ylab="MPG")
# For this example, I'll consider errors as zero values (replace with appropriate criteria if needed)
errors <- sapply(df, function(x) sum(x == 0, na.rm=TRUE))
errors
jouts
# Añadir nombres a los vectores jmis, jouts, y jerrs
variables <- c("model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize", "manufacturer")
names(jmis) <- variables
names(jouts) <- variables
names(jerrs) <- variables
# 1. Describir estas variables y verificar qué otras variables tienen las asociaciones más altas.
desc_stats <- data.frame(
Missing = c(jmis["mileage"], jmis["mpg"], jmis["engineSize"], jmis["price"]),
Outliers = c(jouts["mileage"], jouts["mpg"], jouts["engineSize"], jouts["price"]),
Errors = c(jerrs["mileage"], jerrs["mpg"], jerrs["engineSize"], jerrs["price"])
)
# 2. Calcular la correlación con todas las otras variables y clasificar estas variables según la correlación.
correlations <- sapply(df[, c("mileage", "mpg", "engineSize", "price")], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores.
# Asumiendo que estamos verificando para el grupo 'year'. Reemplaza con la variable de agrupación adecuada si es necesario.
grouped_missing <- tapply(jmis$mis_ind, df$year, mean)
grouped_outliers <- tapply(jouts$outliers_ind, df$year, mean) # asumiendo que outliers_ind es correctamente calculado para outliers
# Añadir nombres a jerrs, jmis y jouts
variables <- c("model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize", "manufacturer")
names(jerrs) <- variables
names(jmis) <- variables
names(jouts) <- variables
# 1. Describir estas variables y verificar qué otras variables tienen las asociaciones más altas.
desc_stats <- data.frame(
Missing = jmis[c("mileage", "mpg", "engineSize", "price")],
Outliers = jouts[c("mileage", "mpg", "engineSize", "price")],
Errors = jerrs[c("mileage", "mpg", "engineSize", "price")]
)
# 2. Calcular la correlación con todas las otras variables y clasificar estas variables según la correlación.
correlations <- sapply(df[, c("mileage", "mpg", "engineSize", "price")], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores.
# Asumiendo que estamos verificando para el grupo 'year'. Reemplaza con la variable de agrupación adecuada si es necesario.
grouped_missing <- tapply(jmis["year"], df$year, mean)
grouped_outliers <- tapply(jouts["year"], df$year, mean)
grouped_errors <- tapply(jerrs["year"], df$year, mean)
# Añadir nombres a los vectores jmis, jouts, y jerrs
variables <- c("model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize", "manufacturer")
names(jmis) <- variables
names(jouts) <- variables
names(jerrs) <- variables
# 1. Describir estas variables y verificar qué otras variables tienen las asociaciones más altas.
variables_of_interest <- c("mileage", "mpg", "engineSize", "price")
desc_stats <- data.frame(
Variable = variables_of_interest,
Missing = jmis[variables_of_interest],
Outliers = jouts[variables_of_interest],
Errors = jerrs[variables_of_interest]
)
# 2. Calcular la correlación con todas las otras variables y clasificar estas variables según la correlación.
correlations <- sapply(df[, variables_of_interest], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# Mostrar gráfico de barras para las correlaciones
barplot(ranked_correlations, main="Correlaciones con Precio", ylab="Correlación", las=2, col="skyblue")
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores para las variables de interés.
grouped_missing <- tapply(jmis["mileage"], df$year, mean)
grouped_outliers <- tapply(jouts["mileage"], df$year, mean)
# Añadir nombres a los vectores jmis, jouts, y jerrs
variables <- c("model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize", "manufacturer")
names(imis) <- variables
names(iouts) <- variables
names(ierrs) <- variables
# 1. Describir estas variables y verificar qué otras variables tienen las asociaciones más altas.
variables_of_interest <- c("mileage", "mpg", "engineSize", "price")
desc_stats <- data.frame(
Variable = variables_of_interest,
Missing = imis[variables_of_interest],
Outliers = iouts[variables_of_interest],
Errors = ierrs[variables_of_interest]
)
# 2. Calcular la correlación con todas las otras variables y clasificar estas variables según la correlación.
correlations <- sapply(df[, variables_of_interest], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# Mostrar gráfico de barras para las correlaciones
barplot(ranked_correlations, main="Correlaciones con Precio", ylab="Correlación", las=2, col="skyblue")
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores para las variables de interés.
grouped_missing <- tapply(jmis["mileage"], df$year, mean)
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores para las variables de interés.
grouped_missing <- tapply(imis["mileage"], df$year, mean)
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores para las variables de interés.
grouped_missing <- tapply(mis1$mis_ind, df$year, mean)
names(jmis) <- variables
names(jouts) <- variables
names(jierrs) <- variables
names(jerrs) <- variables
# 1. Describir estas variables y verificar qué otras variables tienen las asociaciones más altas.
variables_of_interest <- c("mileage", "mpg", "engineSize", "price")
desc_stats <- data.frame(
Variable = variables_of_interest,
Missing = imis[variables_of_interest],
Outliers = iouts[variables_of_interest],
Errors = ierrs[variables_of_interest]
)
# 2. Calcular la correlación con todas las otras variables y clasificar estas variables según la correlación.
correlations <- sapply(df[, variables_of_interest], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# Mostrar gráfico de barras para las correlaciones
barplot(ranked_correlations, main="Correlaciones con Precio", ylab="Correlación", las=2, col="skyblue")
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores para las variables de interés.
grouped_missing <- tapply(mis1$mis_ind, df$year, mean)
grouped_outliers <- tapply(iouts, df$year, mean) # assuming iouts is correctly calculated for outliers
grouped_errors <- tapply(ierrs, df$year, mean) # assuming ierrs is correctly calculated for errors
grouped_mean <- data.frame(
Year = unique(df$year),
Mean_Missing = grouped_missing,
Mean_Outliers = grouped_outliers,
Mean_Errors = grouped_errors
)
# Añadir nombres a los vectores jmis, jouts, y jerrs
variables <- c("model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize", "manufacturer")
names(jmis) <- variables
names(jouts) <- variables
names(jerrs) <- variables
# Variables de interés
variables_of_interest <- c("mileage", "mpg", "engineSize", "price")
# 1. Descripción estadística
desc_stats <- data.frame(
Variable = variables_of_interest,
Missing = jmis[variables_of_interest],
Outliers = jouts[variables_of_interest],
Errors = jerrs[variables_of_interest]
)
print(desc_stats)
# 2. Correlaciones con el precio
correlations <- sapply(df[, variables_of_interest], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# Mostrar gráfico de barras para las correlaciones
barplot(ranked_correlations, names.arg=names(ranked_correlations), main="Correlaciones con Precio", ylab="Correlación", las=2, col="skyblue")
# 3. Promedios de valores faltantes, anómalos y errores agrupados por año
grouped_mean <- data.frame(Year = unique(df$year))
for(var in variables_of_interest) {
grouped_mean[paste("Mean_Missing_", var)] <- tapply(df[,paste(var, "_missing", sep="")], df$year, mean)
grouped_mean[paste("Mean_Outliers_", var)] <- tapply(df[,paste(var, "_outliers", sep="")], df$year, mean)
grouped_mean[paste("Mean_Errors_", var)] <- tapply(df[,paste(var, "_errors", sep="")], df$year, mean)
}
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores para las variables de interés.
grouped_missing <- tapply(mis1$mis_ind, df$year, mean)
grouped_outliers <- tapply(iouts, df$year, mean) # assuming iouts is correctly calculated for outliers
grouped_errors <- tapply(ierrs, df$year, mean) # assuming ierrs is correctly calculated for errors
grouped_mean <- data.frame(
Year = unique(df$year),
Mean_Missing = grouped_missing,
Mean_Outliers = grouped_outliers,
Mean_Errors = grouped_errors
)
ranked_groups <- grouped_mean[order(-grouped_mean$Mean_Missing, -grouped_mean$Mean_Outliers, -grouped_mean$Mean_Errors), ]
# Mostrar gráfico de barras para el promedio de valores faltantes/anómalos/errores por año
barplot(ranked_groups$Mean_Missing, names.arg=ranked_groups$Year, main="Promedio de Valores Faltantes por Año", ylab="Promedio", las=2, col="lightgreen")
barplot(ranked_groups$Mean_Outliers, names.arg=ranked_groups$Year, main="Promedio de Anómalos por Año", ylab="Promedio", las=2, col="lightcoral")
barplot(ranked_groups$Mean_Errors, names.arg=ranked_groups$Year, main="Promedio de Errores por Año", ylab="Promedio", las=2, col="lightyellow")
# Añadir nombres a los vectores jmis, jouts, y jerrs
variables <- c("model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize", "manufacturer")
names(jmis) <- variables
names(jouts) <- variables
names(jerrs) <- variables
# Variables de interés
variables_of_interest <- c("mileage", "mpg", "engineSize", "price")
# 1. Descripción estadística
desc_stats <- data.frame(
Variable = variables_of_interest,
Missing = jmis[variables_of_interest],
Outliers = jouts[variables_of_interest],
Errors = jerrs[variables_of_interest]
)
# 2. Correlaciones con el precio
correlations <- sapply(df[, variables_of_interest], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# Mostrar gráfico de barras para las correlaciones
barplot(ranked_correlations, names.arg=names(ranked_correlations), main="Correlaciones con Precio", ylab="Correlación", las=2, col="skyblue")
# 3. Promedios de valores faltantes, anómalos y errores agrupados por año
grouped_mean <- data.frame(Year = unique(df$year))
for(var in variables_of_interest) {
grouped_mean[paste("Mean_Missing_", var)] <- tapply(df[,paste(var, "_missing", sep="")], df$year, mean)
grouped_mean[paste("Mean_Outliers_", var)] <- tapply(df[,paste(var, "_outliers", sep="")], df$year, mean)
grouped_mean[paste("Mean_Errors_", var)] <- tapply(df[,paste(var, "_errors", sep="")], df$year, mean)
}
# Añadir nombres a los vectores jmis, jouts, y jerrs
variables <- c("model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize", "manufacturer")
names(jmis) <- variables
names(jouts) <- variables
names(jerrs) <- variables
# 1. Describir estas variables y verificar qué otras variables tienen las asociaciones más altas.
variables_of_interest <- c("mileage", "mpg", "engineSize", "price")
desc_stats <- data.frame(
Variable = variables_of_interest,
Missing = imis[variables_of_interest],
Outliers = iouts[variables_of_interest],
Errors = ierrs[variables_of_interest]
)
# 2. Calcular la correlación con todas las otras variables y clasificar estas variables según la correlación.
correlations <- sapply(df[, variables_of_interest], function(x) cor(x, df$price, use="complete.obs"))
ranked_correlations <- sort(correlations, decreasing = TRUE)
# Mostrar gráfico de barras para las correlaciones
barplot(ranked_correlations, main="Correlaciones con Precio", ylab="Correlación", las=2, col="skyblue")
# 3. Calcular para cada grupo de individuos el promedio de valores faltantes/anómalos/errores para las variables de interés.
grouped_missing <- tapply(mis1$mis_ind, df$year, mean)
grouped_outliers <- tapply(iouts, df$year, mean) # assuming iouts is correctly calculated for outliers
grouped_errors <- tapply(ierrs, df$year, mean) # assuming ierrs is correctly calculated for errors
grouped_mean <- data.frame(
Year = unique(df$year),
Mean_Missing = grouped_missing,
Mean_Outliers = grouped_outliers,
Mean_Errors = grouped_errors
)
ranked_groups <- grouped_mean[order(-grouped_mean$Mean_Missing, -grouped_mean$Mean_Outliers, -grouped_mean$Mean_Errors), ]
# Mostrar gráfico de barras para el promedio de valores faltantes/anómalos/errores por año
barplot(ranked_groups$Mean_Missing, names.arg=ranked_groups$Year, main="Promedio de Valores Faltantes por Año", ylab="Promedio", las=2, col="lightgreen")
barplot(ranked_groups$Mean_Outliers, names.arg=ranked_groups$Year, main="Promedio de Anómalos por Año", ylab="Promedio", las=2, col="lightcoral")
barplot(ranked_groups$Mean_Errors, names.arg=ranked_groups$Year, main="Promedio de Errores por Año", ylab="Promedio", las=2, col="lightyellow")
# Mostrar gráfico de barras para las correlaciones
barplot(ranked_correlations, main="Correlaciones con Precio", ylab="Correlación", las=2, col="skyblue")
