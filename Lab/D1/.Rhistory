citation()
# install.packages("car")
library(car)
data(Davis)
attributes(Davis)
citation()
# install.packages("car")
library(car)
data(Davis)
attributes(Davis)
# Numeric Univariant Description
summary(Davis)
# Rows and columns of data.frame Davis
dim(Davis)
# Histograms:
par(mfrow=c(2,2))
hist(Davis$weight)
hist(Davis$weight,10)
hist(Davis$weight,10,col="blue")
hist(Davis$weight,10,col=rainbow(10))
barplot(length(multi_out_total), main="Multivariant outliers", ylab="Number of multivariant outliers")
load("Cars.RData")
# Some useful functions
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
countNA <- function(x) {
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i) }
countX <- function(x,X) {
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i) }
clean_df <- df
library(mvoutlier)
clean_df_numeric <- clean_df[, sapply(clean_df, is.numeric)]
m_dist <- mahalanobis(clean_df_numeric, center = colMeans(clean_df_numeric), cov = cov(clean_df_numeric))
cutoff <- qchisq(0.95, df = 4)
multi_out_total <- which(m_dist > cutoff)
cat("Multivariant outliers: ", length(multi_out_total))
barplot(length(multi_out_total), main="Multivariant outliers", ylab="Number of multivariant outliers")
df$price <- as.numeric(df$price)
df$mileage <- as.numeric(df$mileage)
df$mpg <- as.numeric(df$mpg)
df$engineSize <- as.numeric(df$engineSize)
clean_df <- df
summary(clean_df)
library(missMDA)
#Remember that we have stored the continuous vars
cont_vars
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
summary(clean_df_imputed$completeObs)
boxplot(main = "Imputed Price", clean_df_imputed$completeObs[,"price"])
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
cont_vars = c(3,5,8,9)
#Remember that we have stored the continuous vars
cont_vars
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
summary(clean_df_imputed$completeObs)
boxplot(main = "Imputed Price", clean_df_imputed$completeObs[,"price"])
boxplot(main = "Imputed Mileage", clean_df_imputed$completeObs[,"mileage"])
boxplot(main = "Imputed MPG", clean_df_imputed$completeObs[,"mpg"])
boxplot(main = "Imputed engineSize", clean_df_imputed$completeObs[,"engineSize"])
boxplot(main = "Imputed Price", clean_df_imputed$completeObs[,"price"])
summary(clean_df_imputed$completeObs)
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
summary(clean_df_imputed$completeObs)
summary(clean_df)
library(missMDA)
#Remember that we have stored the continuous vars
cont_vars
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
summary(clean_df_imputed$completeObs)
clean_df_numeric <- clean_df[, sapply(clean_df, is.numeric)]
m_dist <- mahalanobis(clean_df_numeric, center = colMeans(clean_df_numeric), cov = cov(clean_df_numeric))
cutoff <- qchisq(0.95, df = 4)
multi_out_total <- which(m_dist > cutoff)
cat("Multivariant outliers: ", length(multi_out_total))
setwd("~/GitHub/adei-fib/Lab/D1")
load("Cars.RData")
-
-
-
-
# Some useful functions
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
countNA <- function(x) {
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i) }
countX <- function(x,X) {
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i) }
#######################################################
imis<-rep(0,nrow(df))  # rows - trips
jmis<-rep(0,ncol(df))  # columns - variables
######################################################
mis1<-countNA(df)
imis<-mis1$mis_ind
jmis<-mis1$mis_col$mis_x
barplot(as.numeric(imis), main = "Missings per Individual", col = rainbow(10))
barplot(as.numeric(mis1$mis_col$mis_x), main = "Missings per variable", col = rainbow(10))
#######################################################
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,ncol(df))  # columns - variables
#######################################################
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,ncol(df))  # columns - variables
# Mileage
# It is a quantitive variable  Non-possible values will be recoded to NA
selMileage<-which(df$mileage <= 0)
ierrs[selMileage]<-ierrs[selMileage]+1
jerrs[5]<-length(selMileage)
selMileage                 #### sel contains the rownames of the individuals with "0" or less
#                        as  value for mileage
df[selMileage,"mileage"]<-NA
selmissEngine <- selMileage
# EngineSize
# It is a quantitive variable  Non-possible values will be recoded to NA
selEngine<-which(df$engineSize <=0)
ierrs[selEngine]<-ierrs[selEngine]+1
jerrs[9]<-length(selEngine)
selEngine                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selEngine,"engineSize"]<-NA
selmissEngine <- selEngine
# Price
# It is a quantitive variable  Non-possible values will be recoded to NA
selPrice<-which(df$price <=0)
ierrs[selPrice]<-ierrs[selPrice]+1
jerrs[3]<-length(selPrice)
selPrice                 #### sel contains the rownames of the individuals with "0" or less
#                        as  value for price
df[selPrice,"price"]<-NA
selmissPrice <- selPrice
# MPG
# It is a quantitive variable  Non-possible values will be recoded to NA
selMPG<-which(df$mpg < 0)
ierrs[selMPG]<-ierrs[selMPG]+1
jerrs[8]<-length(selMPG)
selMPG                 #### sel contains the rownames of the individuals with less than "0"
#                        as  value for MPG
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selMPG,"mpg"]<-NA
selmissMPG <- selMPG
summary(df)
ierrs
numErrorsIndividuals<-which(ierrs>0)
numErrorsIndividuals
jerrs
barplot(jerrs, main="Errors per Variable", col = rainbow(10))
clean_df <- df
library(mvoutlier)
clean_df_numeric <- clean_df[, sapply(clean_df, is.numeric)]
m_dist <- mahalanobis(clean_df_numeric, center = colMeans(clean_df_numeric), cov = cov(clean_df_numeric))
cutoff <- qchisq(0.95, df = 4)
multi_out_total <- which(m_dist > cutoff)
cat("Multivariant outliers: ", length(multi_out_total))
barplot(length(multi_out_total), main="Multivariant outliers", ylab="Number of multivariant outliers")
clean_df <- df
summary(clean_df)
library(missMDA)
#Remember that we have stored the continuous vars
cont_vars
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
summary(clean_df_imputed$completeObs)
boxplot(main = "Imputed Price", clean_df_imputed$completeObs[,"price"])
boxplot(main = "Imputed Mileage", clean_df_imputed$completeObs[,"mileage"])
cont_vars = c(3,5,8,9)
#Remember that we have stored the continuous vars
cont_vars
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
summary(clean_df_imputed$completeObs)
boxplot(main = "Imputed Price", clean_df_imputed$completeObs[,"price"])
boxplot(main = "Imputed Mileage", clean_df_imputed$completeObs[,"mileage"])
boxplot(main = "Imputed MPG", clean_df_imputed$completeObs[,"mpg"])
boxplot(main = "Imputed engineSize", clean_df_imputed$completeObs[,"engineSize"])
clean_df[,"price"] <- clean_df_imputed$completeObs[,"price"]
clean_df[,"mileage"] <- clean_df_imputed$completeObs[,"mileage"]
clean_df[,"mpg"] <- clean_df_imputed$completeObs[,"mpg"]
clean_df[,"engineSize"] <- clean_df_imputed$completeObs[,"engineSize"]
clean_df_numeric <- clean_df[, sapply(clean_df, is.numeric)]
m_dist <- mahalanobis(clean_df_numeric, center = colMeans(clean_df_numeric), cov = cov(clean_df_numeric))
cutoff <- qchisq(0.95, df = 4)
multi_out_total <- which(m_dist > cutoff)
cat("Multivariant outliers: ", length(multi_out_total))
barplot(length(multi_out_total), main="Multivariant outliers", ylab="Number of multivariant outliers")
cat("Multivariant outliers: ", length(multi_out_total))
# We create an empty vector to store the results of the continuous variable correlations.
correlationsMileage <- c()
# Perform the correlation test for each variable.
for (variable in names(clean_df[,cont_vars])) {
correlation <- cor.test(clean_df$price, clean_df[[variable]])
correlationsMileage <- c(variable, correlation, correlation$p.value)
cat("[",variable)
cat(" ] corr:", correlation$estimate)
cat(" pvalue:", correlation$p.value)
cat("\n")
}
# We create an empty vector to store the results of the continuous variable correlations.
correlationsMileage <- c()
# Perform the correlation test for each variable.
for (variable in names(clean_df[,cont_vars])) {
correlation <- cor.test(clean_df$mileage, clean_df[[variable]])
correlationsMileage <- c(variable, correlation, correlation$p.value)
cat("[",variable)
cat(" ] corr:", correlation$estimate)
cat(" pvalue:", correlation$p.value)
cat("\n")
}
# We create an empty vector to store the results of the continuous variable correlations.
correlationsMPG <- c()
# Perform the correlation test for each variable.
for (variable in names(clean_df[,cont_vars])) {
correlation <- cor.test(clean_df$mpg, clean_df[[variable]])
correlationsMPG <- c(variable, correlation, correlation$p.value)
cat("[",variable)
cat(" ] corr:", correlation$estimate)
cat(" pvalue:", correlation$p.value)
cat("\n")
}
# We create an empty vector to store the results of the continuous variable correlations.
correlationsEngineSize <- c()
# Perform the correlation test for each variable.
for (variable in names(clean_df[,cont_vars])) {
correlation <- cor.test(clean_df$engineSize, clean_df[[variable]])
correlationsEngineSize <- c(variable, correlation, correlation$p.value)
cat("[",variable)
cat(" ] corr:", correlation$estimate)
cat(" pvalue:", correlation$p.value)
cat("\n")
}
