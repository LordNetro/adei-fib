jouts[5]<-length(lloutMileage)
boxplot(df$mileage, main="Clean Boxplot of Mileage", ylab="Mileage")
boxplot(df$mpg, main="Boxplot of MPG", ylab="MPG")
var_outMPG<-calcQ(df$mpg)
summary(df$mpg)
abline(h=var_outMPG$souts,col="red")
abline(h=var_outMPG$souti,col="red")
lloutMPG<-which((df$mpg<var_outMPG$souti)|(df$mpg>var_outMPG$souts))
df$mpg[lloutMPG]<-NA
iouts[lloutMPG]<-iouts[lloutMPG]+1
jouts[5]<-length(lloutMPG)
boxplot(df$mpg, main="Clean Boxplot of MPG", ylab="MPG")
jouts
#df[llout,"engineSize"]<-NA
boxplot(df$price, main="Boxplot of Price", ylab="Price")
var_outPrice<-calcQ(df$price)
summary(df$price)
abline(h=var_outPrice$souts,col="red")
abline(h=var_outPrice$souti,col="red")
lloutPrice<-which((df$price<var_outPrice$souti)|(df$price>var_outPrice$souts))
df$price[lloutPrice]<-NA
iouts[lloutPrice]<-iouts[lloutPrice]+1
jouts[3]<-length(lloutPrice)
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
boxplot(df$engineSize, main="Boxplot of Engine Size", ylab="Engine Size")
var_outEngine<-calcQ(df$engineSize)
summary(df$engineSize)
abline(h=var_outEngine$souts,col="red")
abline(h=var_outEngine$souti,col="red")
lloutEngine<-which((df$engineSize<var_outEngine$souti)|(df$engineSize>var_outEngine$souts))
df$engineSize[lloutEngine]<-NA
iouts[lloutEngine]<-iouts[lloutEngine]+1
jouts[9]<-length(lloutEngine)
boxplot(df$engineSize, main="Clean Boxplot of Engine Size", ylab="Engine Size")
boxplot(df$mileage, main="Boxplot of Mileage", ylab="Mileage")
var_outMileage<-calcQ(df$mileage)
summary(df$mileage)
abline(h=var_outMileage$souts,col="red")
abline(h=var_outMileage$souti,col="red")
lloutMileage<-which((df$mileage<var_outMileage$souti)|(df$mileage>var_outMileage$souts))
df$mileage[lloutMileage]<-NA
iouts[lloutMileage]<-iouts[lloutMileage]+1
jouts[5]<-length(lloutMileage)
boxplot(df$mileage, main="Clean Boxplot of Mileage", ylab="Mileage")
boxplot(df$mpg, main="Boxplot of MPG", ylab="MPG")
var_outMPG<-calcQ(df$mpg)
summary(df$mpg)
abline(h=var_outMPG$souts,col="red")
abline(h=var_outMPG$souti,col="red")
lloutMPG<-which((df$mpg<var_outMPG$souti)|(df$mpg>var_outMPG$souts))
df$mpg[lloutMPG]<-NA
iouts[lloutMPG]<-iouts[lloutMPG]+1
jouts[5]<-length(lloutMPG)
boxplot(df$mpg, main="Clean Boxplot of MPG", ylab="MPG")
jouts
#df[llout,"engineSize"]<-NA
boxplot(df$price, main="Boxplot of Price", ylab="Price")
var_outPrice<-calcQ(df$price)
summary(df$price)
abline(h=var_outPrice$souts,col="red")
abline(h=var_outPrice$souti,col="red")
lloutPrice<-which((df$price<var_outPrice$souti)|(df$price>var_outPrice$souts))
df$price[lloutPrice]<-NA
iouts[lloutPrice]<-iouts[lloutPrice]+1
jouts[3]<-length(lloutPrice)
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
boxplot(df$engineSize, main="Boxplot of Engine Size", ylab="Engine Size")
var_outEngine<-calcQ(df$engineSize)
summary(df$engineSize)
abline(h=var_outEngine$souts,col="red")
abline(h=var_outEngine$souti,col="red")
lloutEngine<-which((df$engineSize<var_outEngine$souti)|(df$engineSize>var_outEngine$souts))
df$engineSize[lloutEngine]<-NA
iouts[lloutEngine]<-iouts[lloutEngine]+1
jouts[9]<-length(lloutEngine)
boxplot(df$engineSize, main="Clean Boxplot of Engine Size", ylab="Engine Size")
boxplot(df$mileage, main="Boxplot of Mileage", ylab="Mileage")
var_outMileage<-calcQ(df$mileage)
summary(df$mileage)
abline(h=var_outMileage$souts,col="red")
abline(h=var_outMileage$souti,col="red")
lloutMileage<-which((df$mileage<var_outMileage$souti)|(df$mileage>var_outMileage$souts))
df$mileage[lloutMileage]<-NA
iouts[lloutMileage]<-iouts[lloutMileage]+1
jouts[5]<-length(lloutMileage)
boxplot(df$mileage, main="Clean Boxplot of Mileage", ylab="Mileage")
boxplot(df$mpg, main="Boxplot of MPG", ylab="MPG")
var_outMPG<-calcQ(df$mpg)
summary(df$mpg)
abline(h=var_outMPG$souts,col="red")
abline(h=var_outMPG$souti,col="red")
lloutMPG<-which((df$mpg<var_outMPG$souti)|(df$mpg>var_outMPG$souts))
df$mpg[lloutMPG]<-NA
iouts[lloutMPG]<-iouts[lloutMPG]+1
jouts[5]<-length(lloutMPG)
boxplot(df$mpg, main="Clean Boxplot of MPG", ylab="MPG")
jouts
#df[llout,"engineSize"]<-NA
dfVariables <- data.frame(price = df$price, engineSize = df$engineSize)
#######################################################
imis<-rep(0,nrow(df))  # rows - trips
jmis<-rep(0,ncol(df))  # columns - variables
######################################################
mis1<-countNA(df)
imis<-mis1$mis_ind
jmis<-mis1$mis_col$mis_x
barplot(as.numeric(imis), main = "Missings per Individual", col = rainbow(10))
barplot(as.numeric(mis1$mis_col$mis_x), main = "Missings per variable", col = rainbow(10))
#######################################################
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,ncol(df))  # columns - variables
######################################################
#######################################################
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,ncol(df))  # columns - variables
######################################################
#dfVariables <- subset(df, select = c(price, mileage, mpg, engineSize))
# Mileage
# It is a quantitive variable  Non-possible values will be recoded to NA
selMileage<-which(df$mileage <= 0)
ierrs[selMileage]<-ierrs[selMileage]+1
jerrs[5]<-length(selMileage)
selMileage                 #### sel contains the rownames of the individuals with "0" or less
#                        as  value for mileage
df[selMileage,"mileage"]<-NA
selmissEngine <- selMileage
# EngineSize
# It is a quantitive variable  Non-possible values will be recoded to NA
selEngine<-which(df$engineSize <=0)
ierrs[selEngine]<-ierrs[selEngine]+1
jerrs[9]<-length(selEngine)
selEngine                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selEngine,"engineSize"]<-NA
selmissEngine <- selEngine
# Price
# It is a quantitive variable  Non-possible values will be recoded to NA
selPrice<-which(df$price <=0)
ierrs[selPrice]<-ierrs[selPrice]+1
jerrs[3]<-length(selPrice)
selPrice                 #### sel contains the rownames of the individuals with "0" or less
#                        as  value for price
df[selPrice,"price"]<-NA
selmissPrice <- selPrice
# MPG
# It is a quantitive variable  Non-possible values will be recoded to NA
selMPG<-which(df$mpg < 0)
ierrs[selMPG]<-ierrs[selMPG]+1
jerrs[8]<-length(selMPG)
selMPG                 #### sel contains the rownames of the individuals with less than "0"
#                        as  value for MPG
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selMPG,"mpg"]<-NA
selmissMPG <- selMPG
summary(df)
ierrs
numErrorsIndividuals<-which(ierrs>0)
numErrorsIndividuals
jerrs
barplot(jerrs, main="Errors per Variable", col = rainbow(10))
boxplot(df$price, main="Boxplot of Price", ylab="Price")
var_outPrice<-calcQ(df$price)
summary(df$price)
abline(h=var_outPrice$souts,col="red")
abline(h=var_outPrice$souti,col="red")
lloutPrice<-which((df$price<var_outPrice$souti)|(df$price>var_outPrice$souts))
df$price[lloutPrice]<-NA
iouts[lloutPrice]<-iouts[lloutPrice]+1
jouts[3]<-length(lloutPrice)
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
boxplot(df$engineSize, main="Boxplot of Engine Size", ylab="Engine Size")
var_outEngine<-calcQ(df$engineSize)
summary(df$engineSize)
abline(h=var_outEngine$souts,col="red")
abline(h=var_outEngine$souti,col="red")
lloutEngine<-which((df$engineSize<var_outEngine$souti)|(df$engineSize>var_outEngine$souts))
df$engineSize[lloutEngine]<-NA
iouts[lloutEngine]<-iouts[lloutEngine]+1
jouts[9]<-length(lloutEngine)
boxplot(df$engineSize, main="Clean Boxplot of Engine Size", ylab="Engine Size")
boxplot(df$mileage, main="Boxplot of Mileage", ylab="Mileage")
var_outMileage<-calcQ(df$mileage)
summary(df$mileage)
abline(h=var_outMileage$souts,col="red")
abline(h=var_outMileage$souti,col="red")
lloutMileage<-which((df$mileage<var_outMileage$souti)|(df$mileage>var_outMileage$souts))
df$mileage[lloutMileage]<-NA
iouts[lloutMileage]<-iouts[lloutMileage]+1
jouts[5]<-length(lloutMileage)
boxplot(df$mileage, main="Clean Boxplot of Mileage", ylab="Mileage")
boxplot(df$mpg, main="Boxplot of MPG", ylab="MPG")
var_outMPG<-calcQ(df$mpg)
summary(df$mpg)
abline(h=var_outMPG$souts,col="red")
abline(h=var_outMPG$souti,col="red")
lloutMPG<-which((df$mpg<var_outMPG$souti)|(df$mpg>var_outMPG$souts))
df$mpg[lloutMPG]<-NA
iouts[lloutMPG]<-iouts[lloutMPG]+1
jouts[5]<-length(lloutMPG)
boxplot(df$mpg, main="Clean Boxplot of MPG", ylab="MPG")
jouts
#df[llout,"engineSize"]<-NA
#missings
ranking_misses <- sort.list(mis1$mis_col, decreasing = TRUE)
#missings
ranking_misses <- sort.list(mis1$mis_col, decreasing = TRUE)
#missings
ranking_misses <- sort.list(mis1$mis_col$mis_x, decreasing = TRUE)
for (j in ranking_misses) {
print(paste(names(df)[j], " : ", misses$mis_col$mis_x[j]))
}
for (j in ranking_misses) {
print(paste(names(df)[j], " : ", mis1$mis_col$mis_x[j]))
}
#errores
ranking_errores <- sort.list(jerr, decreasing = TRUE)
#errores
ranking_errores <- sort.list(jerrs, decreasing = TRUE)
for (j in ranking_errores) {
if(!is.na(names(df)[j]))
{ print(paste(names(df)[j], " : ", jerrs[j])) }
}
#outliers
ranking_outliers <- sort.list(jouts, decreasing = TRUE)
for (j in ranking_outliers) {
if(!is.na(names(df)[j]))
{ print(paste(names(df)[j], " : ", jouts[j])) }
}
jouts
load("Cars.RData")
# Some useful functions
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
countNA <- function(x) {
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i) }
countX <- function(x,X) {
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i) }
#######################################################
imis<-rep(0,nrow(df))  # rows - trips
jmis<-rep(0,ncol(df))  # columns - variables
######################################################
mis1<-countNA(df)
imis<-mis1$mis_ind
jmis<-mis1$mis_col$mis_x
barplot(as.numeric(imis), main = "Missings per Individual", col = rainbow(10))
barplot(as.numeric(mis1$mis_col$mis_x), main = "Missings per variable", col = rainbow(10))
#######################################################
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,ncol(df))  # columns - variables
#######################################################
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,ncol(df))  # columns - variables
# Mileage
# It is a quantitive variable  Non-possible values will be recoded to NA
selMileage<-which(df$mileage <= 0)
ierrs[selMileage]<-ierrs[selMileage]+1
jerrs[5]<-length(selMileage)
selMileage                 #### sel contains the rownames of the individuals with "0" or less
#                        as  value for mileage
df[selMileage,"mileage"]<-NA
selmissEngine <- selMileage
# EngineSize
# It is a quantitive variable  Non-possible values will be recoded to NA
selEngine<-which(df$engineSize <=0)
ierrs[selEngine]<-ierrs[selEngine]+1
jerrs[9]<-length(selEngine)
selEngine                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selEngine,"engineSize"]<-NA
selmissEngine <- selEngine
# Price
# It is a quantitive variable  Non-possible values will be recoded to NA
selPrice<-which(df$price <=0)
ierrs[selPrice]<-ierrs[selPrice]+1
jerrs[3]<-length(selPrice)
selPrice                 #### sel contains the rownames of the individuals with "0" or less
#                        as  value for price
df[selPrice,"price"]<-NA
selmissPrice <- selPrice
# MPG
# It is a quantitive variable  Non-possible values will be recoded to NA
selMPG<-which(df$mpg < 0)
ierrs[selMPG]<-ierrs[selMPG]+1
jerrs[8]<-length(selMPG)
selMPG                 #### sel contains the rownames of the individuals with less than "0"
#                        as  value for MPG
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
df[selMPG,"mpg"]<-NA
selmissMPG <- selMPG
summary(df)
ierrs
numErrorsIndividuals<-which(ierrs>0)
numErrorsIndividuals
jerrs
barplot(jerrs, main="Errors per Variable", col = rainbow(10))
boxplot(df$price, main="Boxplot of Price", ylab="Price")
var_outPrice<-calcQ(df$price)
summary(df$price)
abline(h=var_outPrice$souts,col="red")
abline(h=var_outPrice$souti,col="red")
lloutPrice<-which((df$price<var_outPrice$souti)|(df$price>var_outPrice$souts))
df$price[lloutPrice]<-NA
iouts[lloutPrice]<-iouts[lloutPrice]+1
jouts[3]<-length(lloutPrice)
boxplot(df$price, main="Clean Boxplot of Price", ylab="Price")
boxplot(df$engineSize, main="Boxplot of Engine Size", ylab="Engine Size")
var_outEngine<-calcQ(df$engineSize)
summary(df$engineSize)
abline(h=var_outEngine$souts,col="red")
abline(h=var_outEngine$souti,col="red")
lloutEngine<-which((df$engineSize<var_outEngine$souti)|(df$engineSize>var_outEngine$souts))
df$engineSize[lloutEngine]<-NA
iouts[lloutEngine]<-iouts[lloutEngine]+1
jouts[9]<-length(lloutEngine)
boxplot(df$engineSize, main="Clean Boxplot of Engine Size", ylab="Engine Size")
boxplot(df$mileage, main="Boxplot of Mileage", ylab="Mileage")
var_outMileage<-calcQ(df$mileage)
summary(df$mileage)
abline(h=var_outMileage$souts,col="red")
abline(h=var_outMileage$souti,col="red")
lloutMileage<-which((df$mileage<var_outMileage$souti)|(df$mileage>var_outMileage$souts))
df$mileage[lloutMileage]<-NA
iouts[lloutMileage]<-iouts[lloutMileage]+1
jouts[5]<-length(lloutMileage)
boxplot(df$mileage, main="Clean Boxplot of Mileage", ylab="Mileage")
boxplot(df$mpg, main="Boxplot of MPG", ylab="MPG")
var_outMPG<-calcQ(df$mpg)
summary(df$mpg)
abline(h=var_outMPG$souts,col="red")
abline(h=var_outMPG$souti,col="red")
lloutMPG<-which((df$mpg<var_outMPG$souti)|(df$mpg>var_outMPG$souts))
df$mpg[lloutMPG]<-NA
iouts[lloutMPG]<-iouts[lloutMPG]+1
jouts[5]<-length(lloutMPG)
boxplot(df$mpg, main="Clean Boxplot of MPG", ylab="MPG")
jouts
#df[llout,"engineSize"]<-NA
#missings
ranking_misses <- sort.list(mis1$mis_col$mis_x, decreasing = TRUE)
for (j in ranking_misses) {
print(paste(names(df)[j], " : ", mis1$mis_col$mis_x[j]))
}
#errores
ranking_errores <- sort.list(jerrs, decreasing = TRUE)
for (j in ranking_errores) {
if(!is.na(names(df)[j]))
{ print(paste(names(df)[j], " : ", jerrs[j])) }
}
#outliers
ranking_outliers <- sort.list(jouts, decreasing = TRUE)
for (j in ranking_outliers) {
if(!is.na(names(df)[j]))
{ print(paste(names(df)[j], " : ", jouts[j])) }
}
barplot(table(imis),main = "Missings por cada llamada Barplot", col = rainbow(10))
barplot(jerrs,main = "Errores por cada variable Barplot", col = rainbow(10), xlab = "", ylab = "Errores", names.arg = names(df), las = 2)
vars_continuas = c(3,5,8,9)
res <- cor(df[,vars_continuas])
round(res, 2)
calculated_host_listings_count
corrplot(res)
library(corrplot)
install.packages("corrplot")
library(corrplot)
vars_continuas = c(3,5,8,9)
res <- cor(df[,vars_continuas])
round(res, 2)
corrplot(res)
cont_vars = c(3,5,8,9)
res <- cor(df[,cont_vars])
corrplot(res)
res <- cor(df[,cont_vars], use="complete.obs")
round(res, 2)
corrplot(res)
# Convertimos la matriz en un data frame largo para facilitar el ranking
library(tidyr)
cor_ranking <- as.data.frame(as.table(res)) %>%
filter(Var1 != Var2) %>%
arrange(-abs(n))
# Convertimos la matriz en un data frame largo para facilitar el ranking
library(dplyr)
library(tidyr)
cor_ranking <- as.data.frame(as.table(res)) %>%
filter(Var1 != Var2) %>%
arrange(-abs(n))
# Mostramos el ranking
head(cor_ranking)
cor_ranking <- as.data.frame(as.table(res)) %>%
filter(Var1 != Var2) %>%
arrange(-abs(n))
cor_ranking <- as.data.frame(as.table(res)) %>%
filter(Var1 != Var2) %>%
mutate(n = as.numeric(Freq)) %>%   # Convertir la columna Freq a numérica y llamarla 'n'
arrange(-abs(n))
# Mostramos el ranking
head(cor_ranking)
install.packages("corrplot")
library(corrplot)
cont_vars = c(3,5,8,9)
res <- cor(df[,cont_vars], use="complete.obs")
round(res, 2)
corrplot(res)
# Convertimos la matriz en un data frame largo para facilitar el ranking
library(dplyr)
library(tidyr)
cor_ranking <- as.data.frame(as.table(res)) %>%
filter(Var1 != Var2) %>%
mutate(n = as.numeric(Freq)) %>%   # Convertir la columna Freq a numérica y llamarla 'n'
arrange(-abs(n))
# Mostramos el ranking
head(cor_ranking)
install.packages("corrplot")
barplot( jouts, legend.text = "Number of outliers", col = rainbow(10))
barplot( jouts, main = "Number of Outliers Barplot", xlab = "Number of outliers", col = rainbow(10))
library(missMDA)
df$price <- as.numeric(df$price)
df$mileage <- as.numeric(df$mileage)
df$mpg <- as.numeric(df$mpg)
df$engineSize <- as.numeric(df$engineSize)
clean_df <- df
summary(clean_df)
#Remember that we have stored the continuous vars
cont_vars
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=5)
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=4)
clean_df_imputed <- imputePCA(clean_df[,cont_vars],ncp=2)
summary(clean_df_imputed$completeObs)
boxplot(clean_df_imputed$completeObs[,"age"])
boxplot(clean_df_imputed$completeObs[,"price"])
title(main = "imputed_age")
boxplot(main = "Imputed Price", clean_df_imputed$completeObs[,"price"])
boxplot(main = "Imputed Mileage", clean_df_imputed$completeObs[,"mileage"])
boxplot(main = "Imputed Price", clean_df_imputed$completeObs[,"price"])
boxplot(main = "Imputed Mileage", clean_df_imputed$completeObs[,"mileage"])
boxplot(main = "Imputed MPG", clean_df_imputed$completeObs[,"mpg"])
boxplot(main = "Imputed engineSize", clean_df_imputed$completeObs[,"engineSize"])
clean_df[,"price"] <- clean_df_imputed$completeObs[,"price"]
clean_df[,"mileage"] <- clean_df_imputed$completeObs[,"mileage"]
clean_df[,"mpg"] <- clean_df_imputed$completeObs[,"mpg"]
clean_df[,"engineSize"] <- clean_df_imputed$completeObs[,"engineSize"]
View(clean_df)
# We create an empty vector to store the results of the continuous variable correlations.
correlations <- c()
# Perform the correlation test for each variable.
for (variable in names(clean_df[,cont_vars])) {
correlation <- cor.test(clean_df$duration, clean_df[[variable]])
correlations <- c(variable, correlation, correlation$p.value)
cat("[",variable)
cat(" ] corr:", correlation$estimate)
cat(" pvalue:", correlation$p.value)
cat("\n")
}
# Perform the correlation test for each variable.
for (variable in names(clean_df[,cont_vars])) {
correlation <- cor.test(clean_df$price, clean_df[[variable]])
correlations <- c(variable, correlation, correlation$p.value)
cat("[",variable)
cat(" ] corr:", correlation$estimate)
cat(" pvalue:", correlation$p.value)
cat("\n")
}
for (var in names(clean_df[cont_vars])) {
ttest_result <- t.test(clean_df[[var]] ~ clean_df$y)
print(paste0("[",var, "] pvalue: ", ttest_result$p.value))
}
table(clean_df$y)
View(clean_df)
library(mvoutlier)
clean_df_numeric <- clean_df[, sapply(clean_df, is.numeric)]
m_dist <- mahalanobis(clean_df_numeric, center = colMeans(clean_df_numeric), cov = cov(clean_df_numeric))
cutoff <- qchisq(0.95, df = 10)
m_outliers_total <- which(m_dist > cutoff)
cat("Outliers mutlivarientes: ", length(m_outliers_total))
clean_df_numeric <- clean_df[, sapply(clean_df, is.numeric)]
m_dist <- mahalanobis(clean_df_numeric, center = colMeans(clean_df_numeric), cov = cov(clean_df_numeric))
cutoff <- qchisq(0.95, df = 10)
multi_out_total <- which(m_dist > cutoff)
cat("Multivariant outliers: ", length(multi_out_total))
library(mvoutlier)
clean_df_numeric <- clean_df[, sapply(clean_df, is.numeric)]
m_dist <- mahalanobis(clean_df_numeric, center = colMeans(clean_df_numeric), cov = cov(clean_df_numeric))
cutoff <- qchisq(0.95, df = 4)
multi_out_total <- which(m_dist > cutoff)
cat("Multivariant outliers: ", length(multi_out_total))
# We create an empty vector to store the results of the continuous variable correlations.
correlations <- c()
# Perform the correlation test for each variable.
for (variable in names(clean_df[,cont_vars])) {
correlation <- cor.test(clean_df$price, clean_df[[variable]])
correlations <- c(variable, correlation, correlation$p.value)
cat("[",variable)
cat(" ] corr:", correlation$estimate)
cat(" pvalue:", correlation$p.value)
cat("\n")
}
